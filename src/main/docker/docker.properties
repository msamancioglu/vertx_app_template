# Database connect info
database.url=jdbc:postgresql://postgres/postgres
database.user=postgres
database.password=secret

# Customize the port and network interface on which to listen
listen.url=http://0.0.0.0:8080

# External (proxy/LB) location for this app
public.url=http://localhost:8080

# The public web context (the xxx in https://example.com/xxx/api/...)
app.context=secure-app

# Use SAML 2.0 authentication
security.authenticator=saml

# You need to generate this keystore locally with keytool (see README.md)
# so you have a public/private key pair for signing SAML requests
saml.keystore.path=conf/saml-keystore.jks
saml.keystore.password=keystore-password
saml.key.password=key-password

# Download this from the Identity Provider (IDP) that will be authenticating users
saml.idp.metadata=conf/saml-idp-metadata.xml

# The identity of our application for the trust relationship with the IDP
saml.sp.id=urn:mace:saml:vertx-template.stanford.edu

# The specification of how we support the SAML protocol. This and our identity
# immediately above need to be loaded into the IDP. This file is created automatically
# for you once our SAML implementation is initialized. Do not hand edit it.
saml.sp.metadata=conf/saml-sp-metadata.xml

# Optionally configure session expiration (12 hours is the default)
#saml.session.expiration.minutes=720

# If we set security.authenticator=oidc-keycloak we could configure OpenID Connect like this
# Do not use in production yet!
#auth.client.id=myapp
#auth.client.secret=...from keycloak...
#auth.client.base.uri=http://localhost:8090/secure-app
#auth.server.base.uri=http://keycloak:8080/auth/realms/MYREALM/protocol/openid-connect
#auth.server.public.key=...from keycloak...
